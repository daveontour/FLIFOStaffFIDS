@page "/{selectedView?}/{selectedTerminal?}"
@using FLIFOStaffFIDSCommon;
@using Radzen.Blazor;
@using Radzen;
@using System.Linq;
@using FLIFOStaffFIDSCommonComponents;
@inject IJSRuntime JS


@inject IClientStateController stateController;

@implements IDisposable;

<PageTitle>FLIFO Staff FIDS</PageTitle>

@if (Terminals == null || Views == null)
{
    <div class="loader">
        <div class="content"><img src="./images/loading-buffering.gif" style="width:50px;height:50px;margin-right:15px" />Initialising Staff FIDS</div>
    </div>
}
else
{



    <div style="height:100vh;display:grid;grid-template-rows:50px auto;">
        <div style="justify-content:space-between;width:100%;display:flex;">
            <div style="height:50px;display:flex;flex-direction:row;margin-left:5px;">
                <div style="display:inline-flex;flex-direction:column;margin-right:75px;cursor:pointer;" @onclick=ShowMenu>
                    <div style="display:inline-flex;flex-direction:row"><RadzenIcon Icon="menu" /><h2 style="margin-left:10px">@GlobalMetaData.AirportName</h2></div>
                    <LastUpdateComponent />
                </div>
                <div style="display:inline-flex;flex-direction:row">
                    <h1 style="margin-right:15px;font-weight:200">@GetTerminalName()</h1>
                    <h1 style="color:goldenrod">@GetViewName()</h1>
                </div>
            </div>

            <div style="display:inline-flex;flex-direction:row;column-gap:5px;line-height:50px;text-align: center;">
                @if (Views.Count() > 1)
                {
                    <RadzenDropDown Style="width:200px;height:30px;font-size:12pt;margin-right:5px;margin-top:10px" TValue="string" Placeholder="Select View..." Data=@Views TextProperty="Name" ValueProperty="Identifier" Value=@SelectedView Change=@(args => OnViewDropDownChange(args)) />
                }
                @if (MultiTerminal)
                {
                    <RadzenDropDown Style="width:200px;height:30px;font-size:12pt;margin-right:5px;margin-top:10px" TValue="string" Placeholder="Select Terminal..." Data=@Terminals TextProperty="Name" ValueProperty="Identifier" Value=@SelectedTerminal Change=@(args => OnTerminalDropDownChange(args)) />
                }
            </div>
        </div>
        <div style="grid-row:2;height:calc(100vh - 50px)">
            @if (SelectedBaseView == "arrdep")
            {
                <Combined MultiTerminal=@MultiTerminal RowsPerPage=@RowPerPage View=@SelectedViewDefn />
            }
            @if (SelectedBaseView == "arr")
            {
                <Arrivals MultiTerminal=@MultiTerminal RowsPerPage=@RowPerPage View=@SelectedViewDefn />
            }
            @if (SelectedBaseView == "dep")
            {
                <Departures MultiTerminal=@MultiTerminal RowsPerPage=@RowPerPage View=@SelectedViewDefn />
            }
        </div>
    </div>

}

<div id="mySidenav" class="sidenav">
    <a class="closebtn" @onclick=CloseMenu>&times;</a>
    <div style="display:grid;grid-template-columns:auto 100px;line-height:50px;">
        <label style="height:50px;line-height:50px;font-size:12pt;margin-right:2px">Rows per Page:</label>
        <RadzenNumeric Style="width:60px;height:30px;line-height:30px;font-size:12pt;;margin-top:10px;margin-right:5px" Min="5" Max="50" @bind-Value=@RowPerPage Change="(int args) => PageChanged()" />
        <label style="height:50px;line-height:50px;font-size:12pt;margin-right:2px">Auto Page:</label>
        <RadzenNumeric Style="width:60px;height:30px;line-height:30px;font-size:12pt;;margin-top:10px;margin-right:5px" Min="0" Max="5" @bind-Value=@stateController.PagerLength Change="(int args) => PagerLengthChanged()" />
        <div style="padding:5px;grid-column-start:1;grid-column-end:3;line-height:20px;margin-bottom:10px">Auto Page sets the number of pages that will automatically be scrolled through on a timer.  Set to 1 to disable auto paging</div>
        <label style="height:50px;line-height:50px;font-size:12pt;margin-right:5px">Apply Rolloff Rules</label>
        <RadzenCheckBox Style="height:30px;width:30px;line-height:50px;margin-right:5px;margin-top:10px" @bind-Value=stateController.ApplyRollOffRules Change="(bool args) => RuleChanged()" />
        <div style="padding:5px;grid-column-start:1;grid-column-end:3;line-height:20px">Uncheck Rolloff Rules to see all flights availalbe without applying roll off rules</div>

    </div>
</div>

@code {
    [Parameter]
    public bool ApplyRules { get; set; } = false;
    [Parameter]
    public bool MultiTerminal { get; set; } = false;
    [Parameter]
    public string SelectedTerminal { get; set; } = "all";
    [Parameter]
    public string SelectedView { get; set; } = "arrdep";
    public string SelectedBaseView { get; set; }
    public View SelectedViewDefn { get; set; }

    public MetaData GlobalMetaData { get; set; }
    public int RowPerPage { get; set; } = 20;
    public List<View> Views { get; set; }
    public List<Terminal> Terminals { get; set; }

    public string LastUpdated
    {
        get
        {
            return $"Last Update {stateController.LastUpdated.ToString("HH:mm:ss")}";
        }
    }
    protected override async Task OnInitializedAsync()
    {
        stateController.OnFlightsUpdated += FlightsUpdated;


        Terminals = await stateController.GetTerminals();
        if (Terminals.Count > 1)
        {
            MultiTerminal = true;
        }
        else
        {
            MultiTerminal = false;
        }
        Views = await stateController.GetViews();
        SelectedView = SelectedView ?? "arrdep";

        if (Views.Count() > 1)
        {
            foreach (View v in Views)
            {
                if (SelectedView == v.Identifier)
                {
                    SelectedViewDefn = v;
                    if (v.Type == "arrival") SelectedBaseView = "arr";
                    if (v.Type == "departure") SelectedBaseView = "dep";
                    if (v.Type == "combo") SelectedBaseView = "arrdep";
                    break;
                }
            }
        }
        else if (Views.Count() == 1)
        {
            View v = Views.ElementAt<View>(0);
            if (SelectedView == v.Identifier)
            {
                SelectedViewDefn = v;
                if (v.Type == "arrival") SelectedBaseView = "arr";
                if (v.Type == "departure") SelectedBaseView = "dep";
                if (v.Type == "combo") SelectedBaseView = "arrdep";

            }
        }
        else
        {
            View v = new View()
                {
                    Name = "Arrivals and Departures",
                    Identifier = "arrdep",
                    Type = "combo"
                };
            SelectedViewDefn = v;
            SelectedBaseView = "arrdep";
        }

        SelectedBaseView = SelectedBaseView ?? "arrdep";
        SelectedTerminal = SelectedTerminal ?? "all";
        stateController.SelectedTerminal = SelectedTerminal;
        GlobalMetaData = await stateController.GetMetaData();
        stateController.ShowTerminal = GlobalMetaData.ShowTerminal;
        await stateController.GetAllFlights();
    }

    public async Task ShowMenu()
    {
        await JS.InvokeVoidAsync("openNav");
    }
    public async Task CloseMenu()
    {
        await JS.InvokeVoidAsync("closeNav");
    }
    public async void FlightsUpdated()
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    public async void NoFlightsUpdated()
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void RuleChanged()
    {
        stateController.NotifyUpdateFlights();
    }
    public void PageChanged()
    {
        stateController.NotifyPageChange();
    }
    public void PagerLengthChanged()
    {
        stateController.NotifyPagerLengthChange();
    }
    public string GetViewName()
    {
        foreach (var item in Views)
        {
            if (item.Identifier == SelectedView)
            {
                return item.Name;
            }
        }
        return "";
    }
    public string GetTerminalName()
    {
        foreach (var item in Terminals)
        {
            if (item.Identifier == SelectedTerminal)
            {
                return item.Name;
            }
        }
        return "";
    }

    private string GetTitle()
    {
        return $"{GlobalMetaData.AirportName} {GetTerminalName()} - {GetViewName()}";
    }

    public void OnTerminalDropDownChange(object args)
    {
        SelectedTerminal = (string)args;
        stateController.SelectedTerminal = SelectedTerminal;
        stateController.NotifyUpdateTerminal();
    }
    public void OnViewDropDownChange(object args)
    {
        SelectedView = (string)args;
        foreach (View v in Views)
        {
            if (SelectedView == v.Identifier)
            {
                SelectedViewDefn = v;
                if (v.Type == "arrival") SelectedBaseView = "arr";
                if (v.Type == "departure") SelectedBaseView = "dep";
                if (v.Type == "combo") SelectedBaseView = "arrdep";
                break;
            }
        }
        StateHasChanged();
    }

    public void Dispose()
    {
        stateController.OnFlightsUpdated -= FlightsUpdated;
    }
}